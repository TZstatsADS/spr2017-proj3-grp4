mean(pre3 == testdata$y)
cv.function(feature_new,3)
library(caret)
nnetFit <- train(y~., data = traindata
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
nnetFit <- train(y~., data = traindata
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
nnetFit <- train(y~., data = traindata,
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100)
nnetFit
nnetFit$method
nnetFit$bestTune
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata)
pre.nnet<- predict(model.nnet, testdata, type = "class")
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
traindata$y<- as.factor(traindata$y)
nnetFit <- train(y~., data = traindata,
method = "nnet",
preProcess = "range",
tuneLength = 3,
trace = FALSE,
maxit = 100)
nnetFit$bestTune
warnings()
nnetFit <- train(y~., data = traindata,
method = "nnet",
preProcess = "range",
tuneLength = 3,
trace = FALSE,
maxit = 100,
MaxNWts=5000)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.001, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 4, decay = 0.001, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 4, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 4, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
nnetFit <- train(y~., data = traindata,
method = "nnet",
preProcess = "range",
tuneLength = 2,
trace = FALSE,
maxit = 100,
MaxNWts=5000)
nnetFit$bestTune
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
samp<- sample(1:2000, size = 400)
traindata<- feature_new[-samp, ]
testdata<- feature_new[samp, ]
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
traindata$y<- as.factor(traindata$y)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
samp<- sample(1:2000, size = 400)
traindata<- feature_new[-samp, ]
testdata<- feature_new[samp, ]
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
samp<- sample(1:2000, size = 400)
traindata<- feature_new[-samp, ]
testdata<- feature_new[samp, ]
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet<- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
source("../lib/train.R")
source("../lib/test.R")
feature_new<- read.csv("../output/feature_new.csv", header = T)
feature_new<- data.frame(feature_new[,-1])
y<- c(rep(0,1000),rep(1,1000))
feature_new$y<- y
samp<- sample(1:2000, size = 400)
traindata<- feature_new[-samp, ]
testdata<- feature_new[samp, ]
m<-train.baseline(traindata)
pre<-test.baseline(m,testdata)
mean(pre == testdata$y)
m2<- train.BP(traindata)
pre2<- test.BP(m2, testdata)
mean(pre2 == testdata$y)
m3<- train.rf(traindata)
pre3<- test.rf(m3, testdata)
mean(pre3 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre2<- test.bp(model.nnet, testdata)
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model, test.data, type = "class")
mean(pre.nnet == testdata$y)
pre.nnet <- predict(model, test.data, type = "class")
pre.nnet <- predict(model.nnet, test.data, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, test.data, type = "class")
mean(pre.nnet == testdata$y)
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
samp<- sample(1:2000, size = 400)
traindata<- feature_new[-samp, ]
testdata<- feature_new[samp, ]
traindata$y<- as.factor(traindata$y)
pre.nnet <- predict(model.nnet, testdata, type = "class")
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.1, maxit = 200,
trace = F, MaxNWts=5000)
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
nnetFit <- train(y~., data = traindata, method = "nnet",
preProcess = "pca",tuneLength = 2,
trace = FALSE,maxit = 100,MaxNWts=5000)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 3, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.001, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.01, maxit = 200,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.01, maxit = 300,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.01, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.001, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.0001, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.00001, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 1, decay = 0.1, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
samp<- sample(1:2000, size = 400)
traindata<- feature_new[-samp, ]
testdata<- feature_new[samp, ]
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
traindata$y<- as.factor(traindata$y)
model.nnet <- nnet(y ~ ., data = traindata, linout = F,
size = 2, decay = 0.01, maxit = 100,
trace = F, MaxNWts=5000)
pre.nnet <- predict(model.nnet, testdata, type = "class")
mean(pre.nnet == testdata$y)
##########Using PCA to process data
# To imporve efficiency, we use PCA to do feature selection
# Combined with cross-validation step to avoid overfitting (set training and test data for PCA process)
# First read in 2000x10000 features extracted from SIFT
feature10000<-read.csv("../data/histsall 10000.csv", header = F)
feature10000<-t(feature10000)
# prcomp can handle the high dimension problem that the number of predictors are much larger than the number of
# observations, and it would get as much principal components. In this case, we would get 2000. Thus, we need not
# to select the suitable number of principal components.
pca <- prcomp(feature10000, scale = T)
rot<- (pca$rotation)[,1:500]
feature_new<- feature10000 %*% rot
feature_new<- matrix(unlist(feature_new),2000,500)
write.csv(feature_new, "../output/feature_new.csv")
samp<- sample(1:2000, size = 400)
samp<- sample(1:2000, size = 400)
train10000<- feature10000[-samp, ]
source("../lib/train.R")
source("../lib/test.R")
feature10000<-read.csv("../data/histsall 10000.csv", header = F)
feature10000<-t(feature10000)
y<- c(rep(0,1000),rep(1,1000))
samp<- sample(1:2000, size = 400)
train10000<- feature10000[-samp, ]
test10000<- feature10000[samp, ]
pca <- prcomp(train10000, scale = T)
rot<- (pca$rotation)[,1:500]
pca <- prcomp(train10000, scale = F)
rot<- (pca$rotation)[,1:500]
traindata<- train10000 %*% rot
testdata<- test10000 %*% rot
traindata<- data.frame(train10000 %*% rot)
View(traindata)
testdata<- data.frame(test10000 %*% rot)
View(testdata)
View(traindata)
traindata$y<- y[-samp]
testdata$y<- y[samp]
m<-train.baseline(traindata)
pre<-test.baseline(m,testdata)
mean(pre == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(model.nnet, testdata)
mean(pre2 == testdata$y)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m3<- train.rf(traindata)
pre3<- test.rf(m3, testdata)
mean(pre3 == testdata$y)
model.svm<- svm(y~., data = traindata)
pre.svm<- predict(model.svm, testdata)
mean(pre.svm == testdata$y)
traindata$y<- as.factor(traindata$y)
model.svm<- svm(y~., data = traindata)
pre.svm<- predict(model.svm, testdata)
mean(pre.svm == testdata$y)
traindata$y<- as.factor(traindata$y)
model.svm<- svm(y~., data = traindata)
pre.svm<- predict(model.svm, testdata)
mean(pre.svm == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
feature10000<-read.csv("../data/histsall 10000.csv", header = F)
feature10000<-read.csv("../data/histsall 10000.csv", header = F)
feature10000<-read.csv("../data/histsall 10000.csv", header = F)
feature10000<-t(feature10000)
y<- c(rep(0,1000),rep(1,1000))
set.seed(2)
samp<- sample(1:2000, size = 400)
train10000<- feature10000[-samp, ]
test10000<- feature10000[samp, ]
pca <- prcomp(train10000, scale = F)
rot<- (pca$rotation)[,1:500]
traindata<- data.frame(train10000 %*% rot)
testdata<- data.frame(test10000 %*% rot)
traindata$y<- y[-samp]
testdata$y<- y[samp]
m<-train.baseline(traindata)
pre<-test.baseline(m,testdata)
mean(pre == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m3<- train.rf(traindata)
pre3<- test.rf(m3, testdata)
mean(pre3 == testdata$y)
m4- train.svm(traindata)
pre4<- test.svm(m4, testdata)
mean(pre4 == testdata$y)
m4<- train.svm(traindata)
pre4<- test.svm(m4, testdata)
mean(pre4 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
set.seed(3)
samp<- sample(1:2000, size = 400)
set.seed(3)
samp<- sample(1:2000, size = 400)
set.seed(4)
samp<- sample(1:2000, size = 400)
train10000<- feature10000[-samp, ]
test10000<- feature10000[samp, ]
pca <- prcomp(train10000, scale = F)
rot<- (pca$rotation)[,1:500]
traindata<- data.frame(train10000 %*% rot)
testdata<- data.frame(test10000 %*% rot)
traindata$y<- y[-samp]
testdata$y<- y[samp]
m<-train.baseline(traindata)
pre<-test.baseline(m,testdata)
mean(pre == testdata$y)
m2<- train.bp(traindata)
pre2<- test.bp(m2, testdata)
mean(pre2 == testdata$y)
m3<- train.rf(traindata)
pre3<- test.rf(m3, testdata)
mean(pre3 == testdata$y)
m4<- train.svm(traindata)
pre4<- test.svm(m4, testdata)
mean(pre4 == testdata$y)
cv.function(traindata,3)
source("../lib/cross_validation.R")
cv.function(traindata,3)
source("../lib/cross_validation.R")
cv.function(traindata,3)
install.packages("h2o")
library(h2o)
library(h2o)
model.h2o<- h2o.deeplearning(y=y, traindata)
model.h2o<- h2o.deeplearning(y=y, training_frame = traindata)
trdata<- as.h2o(traindata)
h2o.init()
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
feature<-read.csv("../data/sift_features.csv", header = F)
feature<-t(feature)
install.packages("gbm")
source("../lib/train.R")
source("../lib/test.R")
install.packages("gbm")
source("../lib/train.R")
install.packages("gbm")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
library(gbm)
install.packages("gbm")
install.packages("ade4")
install.packages("gbm")
library(gb)
install.packages("survival")
install.packages("gbm")
library(caret)
library(DMwR)
library(nnet)
library(randomForest)
library(e1071)
library(gbm)
feature<-read.csv("../data/sift_features.csv", header = F)
feature<-t(feature)
y<- c(rep(0,1000),rep(1,1000))
set.seed(4)
samp<- sample(1:2000, size = 400)
feature10000<-read.csv("../data/sift_features.csv", header = F)
feature10000<-t(feature10000)
y<- c(rep(0,1000),rep(1,1000))
dim(feature)
View(feature10000)
View(feature10000)
install.packages("C:/Users/qn_li/AppData/Local/Temp/Rtmps3TAlN/downloaded_packages/gbm_2.1.3.zip", repos = NULL, type = "win.binary")
library(gbm)
