err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(par=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
View(err_cv)
which.min(err_cv[,1])
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
fit_train <- train(dat_train, label_train, par_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
par_best$par
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
sift.features=read.csv("../data/sift_features.csv", header = T)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
all=data.frame(cbind(label,t(sift.features)))
set.seed(1)
test.index=sample(1:2000,400,replace=F)
colnames(all)[1]="y"
test.sift=all[test.index,]
test.x.sift=test.sift[,-1]
train.sift=all[-test.index,]
baseline.model=train.baseline(train.sift)
baseline.pre=test.baseline(baseline.model,test.x.sift)
table(baseline.pre,test.sift$y)
a=system.time(baseline <- train.baseline(all))
b=system.time(gbm <- train.baseline(new.data))
baseline$n
a
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
b=system.time(gbm <- train.baseline(new.data))
c=system.time(bp <- train.bp(new.data))
d=system.time(rf <- train.rf(new.data))
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
time=list(baseline.sift=a,gbm=b,bp=c,rf=d,svm=e,logistic=f,vote=NA)
gbm$n
gbm.model=train.baseline(train)
gbm.pre=test.baseline(gbm.model,test.x)
table(gbm.pre,test$y)
bp.model=train.bp(train)
bp.pre=test.bp(bp.model,test.x)
table(bp.pre,test$y)
system.time(rf.model <- train.rf(train))
rf.pre=test.rf(rf.model,test.x)
table(rf.pre,test$y)
system.time(svm.model <- train.svm(train))
svm.pre=test.svm(svm.model,test.x)
table(svm.pre,test$y)
system.time(svm.model <- train.svm(train))
svm.pre=test.svm(svm.model,test.x)
table(svm.pre,test$y)
system.time(log.model <- train.log(train))
log.pre=test.log(log.model, test.x)
table(log.pre, test$y)
pre=(as.numeric(as.character(bp.pre))+as.numeric(as.character(log.pre))+as.numeric(as.character(svm.pre)))
pre=ifelse(pre>=2,1,0)
table(pre,test$y)
0.035+0.005
1.02^-4
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
sift.features=read.csv("../data/sift_features.csv", header = T)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
all=data.frame(cbind(label,t(sift.features)))
set.seed(1)
test.index=sample(1:2000,400,replace=F)
colnames(all)[1]="y"
test.sift=all[test.index,]
test.x.sift=test.sift[,-1]
train.sift=all[-test.index,]
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
gbm.model=train.baseline(train)
gbm.pre=test.baseline(gbm.model,test.x)
table(gbm.pre,test$y)
bp.model=train.bp(train)
bp.pre=test.bp(bp.model,test.x)
table(bp.pre,test$y)
system.time(svm.model <- train.svm(train))
svm.pre=test.svm(svm.model,test.x)
table(svm.pre,test$y)
(bp.pre==svm.pre)
sum(bp.pre!=svm.pre)
system.time(log.model <- train.log(train))
log.pre=test.log(log.model, test.x)
table(log.pre, test$y)
sum(log.pre!=svm.pre)
sum(log.pre!=bp.pre)
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
sift.features=read.csv("../data/sift_features.csv", header = T)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
all=data.frame(cbind(label,t(sift.features)))
set.seed(1)
test.index=sample(1:2000,400,replace=F)
colnames(all)[1]="y"
test.sift=all[test.index,]
test.x.sift=test.sift[,-1]
train.sift=all[-test.index,]
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
a=system.time(baseline <- train.baseline(all))
b=system.time(gbm <- train.baseline(new.data))
c=system.time(bp <- train.bp(new.data))
d=system.time(rf <- train.rf(new.data))
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
time=list(baseline=a,gbm=b,bp=c,rf=d,svm=e,logistic=f,vote=NA)
time
test1.sift=read.csv("../data/test_data/sift_features.csv", header = T)
baseline.test=baseline.pre(baseline,test1.sift)
outcome1=test.baseline(baseline,test1.sift)
test1.sift=t(test1.sift)
outcome1=test.baseline(baseline,test1.sift)
test1.sift=read.csv("../data/test_data/sift_features.csv", header = T)
test1.sift=data.frame(t(test1.sift))
outcome1=test.baseline(baseline,test1.sift)
table(outcome1)
outcome1[1]
head(outcome1)
test1.lbp=read.csv("../output/lbp_test.csv", header = T)
outcome2=bp.pre(bp,test1.lbp)
outcome2=test.bp(bp,test1.lbp)
test1.lbp=read.csv("../output/lbp_test.csv", header = F)
outcome2=test.bp(bp,test1.lbp)
outcome2=test.bp(bp,test1.lbp)
View(test1.lbp)
View(lbp)
c=system.time(bp <- train.bp(new.data))
outcome2=test.bp(bp,test1.lbp)
test1.lbp=read.csv("../output/lbp_test.csv", header = F)
outcome2=test.bp(bp,test1.lbp)
test.svm(svm,test1.lbp)
View(test1.lbp)
outcome2=test.bp(bp,test1.sift)
outcome2=test.bp(bp,test1.sift)
sift.features=read.csv("../data/sift_features.csv", header = T)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
outcome2=test.bp(bp,test1.sift)
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
outcome2=test.bp(bp,test1.sift)
test.svm(svm,test1.lbp)
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
c=system.time(bp <- train.bp(new.data))
source("../lib/test.r")
outcome2=test.bp(bp,test1.sift)
outcome2=test.bp(bp,test1.sift)
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
c=system.time(bp <- train.bp(new.data))
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
outcome2=test.bp(bp,test1.lbp)
test.svm(svm,test1.lbp)
lbp=read.csv("../data/lbp.csv", header = F)
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
c=system.time(bp <- train.bp(new.data))
outcome2=test.bp(bp,test1.lbp)
outcome2=test.bp(model=bp,test1.lbp)
outcome2=test.bp(model=bp,test.data=test1.lbp)
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
sift.features=read.csv("../data/sift_features.csv", header = T)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
all=data.frame(cbind(label,t(sift.features)))
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
colnames(all)[1]="y"
c=system.time(bp <- train.bp(new.data))
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
test1.sift=read.csv("../data/test_data/sift_features.csv", header = T)
test1.lbp=read.csv("../output/lbp_test.csv", header = F)
outcome2=test.bp(model=bp,test.data=test1.lbp)
all=data.frame(cbind(label,t(sift.features)))
set.seed(1)
test.index=sample(1:2000,400,replace=F)
colnames(all)[1]="y"
test.sift=all[test.index,]
test.x.sift=test.sift[,-1]
train.sift=all[-test.index,]
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
c=system.time(bp <- train.bp(new.data))
e=system.time(svm <- train.svm(new.data))
f=system.time(logistic <- train.log(new.data))
outcome2=test.bp(model=bp,test.data=test1.lbp)
outcome2=test.bp(model=bp,test.data=test1.lbp)
test.svm(svm,test1.lbp)
c=system.time(bp1 <- train.bp(new.data))
outcome2=test.bp(model=bp1,test.data=test1.lbp)
c=system.time(bp <- train.bp(new.data))
outcome2=test.bp(model=bp,test.data=test1.lbp)
test.lbp=read.csv("../output/lbp_test.csv", header = F)
outcome2=test.bp(model=bp,test.data=test.lbp)
packages.used=c("gbm", "caret","DMwR" ,"nnet","randomForest","EBImage","e1071")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
sift.features=read.csv("../data/sift_features.csv", header = T)
lbp=read.csv("../data/lbp.csv", header = F)
label=read.csv("../data/labels.csv")
source("../lib/train.r")
source("../lib/test.r")
all=data.frame(cbind(label,t(sift.features)))
set.seed(1)
test.index=sample(1:2000,400,replace=F)
colnames(all)[1]="y"
test.sift=all[test.index,]
test.x.sift=test.sift[,-1]
train.sift=all[-test.index,]
new.data=data.frame(cbind(label,lbp))
colnames(new.data)[1]="y"
test=new.data[test.index,]
test.x=test[,-1]
train=new.data[-test.index,]
View(test1.lbp)
View(test.x)
column.names(test.lbp)
colnames(test.lbp)
colnames(test.lbp)=colnames(test.x)
outcome2=test.bp(model=bp,test.data=test.lbp)
outcome2
outcome3=test.svm(svm,test.lbp)
outcome3=test.log(log,test,lbp)
outcome4=test.log(log,test.lbp)
f=system.time(logistic <- train.log(new.data))
outcome4=test.log(model=logistic,test.lbp)
outcome.final=(as.numeric(as.character(outcome2))+as.numeric(as.character(outcome3))+as.numeric(as.character(outcome4)))
outcome.final=(as.numeric(as.character(outcome2))+as.numeric(as.character(outcome3))+as.numeric(as.character(outcome4)))
outcome.final=ifelse(outcome.final>=2,1,0)
outcome.final
head(outcome.final)
head(outcome1)
head(outcome.final,10)
test1.sift=read.csv("../data/test_data/sift_features.csv", header = T)
test1.sift=data.frame(t(test1.sift))
outcome1=test.baseline(baseline,test1.sift)
a=system.time(baseline <- train.baseline(all))
test1.sift=read.csv("../data/test_data/sift_features.csv", header = T)
test1.sift=data.frame(t(test1.sift))
outcome1=test.baseline(baseline,test1.sift)
test.lbp=read.csv("../output/lbp_test.csv", header = F)
colnames(test.lbp)=colnames(test.x)
outcome2=test.bp(model=bp,test.data=test.lbp)
outcome3=test.svm(svm,test.lbp)
outcome4=test.log(model=logistic,test.lbp)
#major vote
outcome.final=(as.numeric(as.character(outcome2))+as.numeric(as.character(outcome3))+as.numeric(as.character(outcome4)))
outcome.final=ifelse(outcome.final>=2,1,0)
sum(outcome1!=outcome.final)
sum(outcome1!=outcome2)
sum(outcome2!=outcome.final)
sum(outcome3!=outcome.final)
sum(outcome4!=outcome.final)
outcome=cbind(baseline=outcome1,advanced=outcome.final)
View(outcome)
labels=read("../data/labels.csv")
labels=read.csv("../data/labels.csv")
View(labels)
labels=read.csv("../data/test_data/labels.csv")
View(labels)
labels[,1]=outcome1
labels[,2]=outcome.final
View(labels)
labels[,2]=outcome.final
View(labels)
labels=read.csv("../data/test_data/labels.csv")
labels[,2]=outcome1
labels[,3]=outcome.final
write.csv(labels,"../output/lables.csv")
write.csv(labels,"../output/labels.csv")
